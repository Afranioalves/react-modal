{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"react-modal Accessible modal dialog component for React.JS We maintain that accessibility is a key component of any modern web application. As such, we have created this modal in such a way that it fulfills the accessibility requirements of the modern web. We seek to keep the focus on accessibility while providing a functional, capable modal component for general use. Installation To install the stable version you can use npm or yarn : $ npm install react-modal $ yarn add react-modal General Usage The only required prop for the modal object is isOpen , which indicates whether the modal should be displayed. The following is an example of using react-modal specifying all the possible props and options: import ReactModal from 'react-modal' ; < ReactModal isOpen = { false /* Boolean describing if the modal should be shown or not. */ } onAfterOpen = { handleAfterOpenFunc /* Function that will be run after the modal has opened. */ } onAfterClose = { handleAfterCloseFunc /* Function that will be run after the modal has closed. */ } onRequestClose = { handleRequestCloseFunc /* Function that will be run when the modal is requested to be closed (either by clicking on overlay or pressing ESC). Note: It is not called if isOpen is changed by other means. */ } closeTimeoutMS = { 0 /* Number indicating the milliseconds to wait before closing the modal. */ } style = { { overlay : {}, content : {} } /* Object indicating styles to be used for the modal. It has two keys, `overlay` and `content`. See the `Styles` section for more details. */ } contentLabel = { \"Example Modal\" /* String indicating how the content container should be announced to screenreaders */ } portalClassName = { \"ReactModalPortal\" /* String className to be applied to the portal. See the `Styles` section for more details. */ } overlayClassName = { \"ReactModal__Overlay\" /* String className to be applied to the overlay. See the `Styles` section for more details. */ } id = { \"some-id\" /* String id to be applied to the content div. */ } className = { \"ReactModal__Content\" /* String className to be applied to the modal content. See the `Styles` section for more details. */ } bodyOpenClassName = { \"ReactModal__Body--open\" /* String className to be applied to the document.body (must be a constant string). This attribute when set as `null` doesn't add any class to document.body. See the `Styles` section for more details. */ } htmlOpenClassName = { \"ReactModal__Html--open\" /* String className to be applied to the document.html (must be a constant string). This attribute is `null` by default. See the `Styles` section for more details. */ } ariaHideApp = { true /* Boolean indicating if the appElement should be hidden */ } shouldFocusAfterRender = { true /* Boolean indicating if the modal should be focused after render. */ } shouldCloseOnOverlayClick = { true /* Boolean indicating if the overlay should close the modal */ } shouldCloseOnEsc = { true /* Boolean indicating if pressing the esc key should close the modal Note: By disabling the esc key from closing the modal you may introduce an accessibility issue. */ } shouldReturnFocusAfterClose = { true /* Boolean indicating if the modal should restore focus to the element that had focus prior to its display. */ } role = { \"dialog\" /* String indicating the role of the modal, allowing the 'dialog' role to be applied if desired. This attribute is `dialog` by default. */ } preventScroll = { false /* Boolean indicating if the modal should use the preventScroll flag when restoring focus to the element that had focus prior to its display. */ } parentSelector = { () => document . body /* Function that will be called to get the parent element that the modal will be attached to. */ } aria = { { labelledby : \"heading\" , describedby : \"full_description\" } /* Additional aria attributes (optional). */ } data = { { background : \"green\" } /* Additional data attributes (optional). */ } testId = { \"\" /* String testId that renders a data-testid attribute in the DOM, useful for testing. */ } overlayRef = { setOverlayRef /* Overlay ref callback. */ } contentRef = { setContentRef /* Content ref callback. */ } overlayElement = { ( props , contentElement ) => < div { ...props }>{ contentElement }</ div > /* Custom Overlay element. */ } contentElement = { ( props , children ) => < div { ...props }>{ children }</ div > /* Custom Content element. */ } > < p > Modal Content </ p > </ ReactModal > Using a custom parent node By default, the modal portal will be appended to the document's body. You can choose a different parent element by providing a function to the parentSelector prop that returns the element to be used: < Modal ... parentSelector = {() => document . querySelector ( '#root' )}> < p > Modal Content .</ p > </ Modal > If you do this, please ensure that your app element is set correctly. The app element should not be a parent of the modal, to prevent modal content from being hidden to screenreaders while it is open. Refs You can use ref callbacks to get the overlay and content DOM nodes directly: < Modal ... overlayRef = { node => ( this . overlayRef = node )} contentRef = { node => ( this . contentRef = node )}> < p > Modal Content .</ p > </ Modal > License MIT","title":"Overview"},{"location":"#react-modal","text":"Accessible modal dialog component for React.JS We maintain that accessibility is a key component of any modern web application. As such, we have created this modal in such a way that it fulfills the accessibility requirements of the modern web. We seek to keep the focus on accessibility while providing a functional, capable modal component for general use.","title":"react-modal"},{"location":"#installation","text":"To install the stable version you can use npm or yarn : $ npm install react-modal $ yarn add react-modal","title":"Installation"},{"location":"#general-usage","text":"The only required prop for the modal object is isOpen , which indicates whether the modal should be displayed. The following is an example of using react-modal specifying all the possible props and options: import ReactModal from 'react-modal' ; < ReactModal isOpen = { false /* Boolean describing if the modal should be shown or not. */ } onAfterOpen = { handleAfterOpenFunc /* Function that will be run after the modal has opened. */ } onAfterClose = { handleAfterCloseFunc /* Function that will be run after the modal has closed. */ } onRequestClose = { handleRequestCloseFunc /* Function that will be run when the modal is requested to be closed (either by clicking on overlay or pressing ESC). Note: It is not called if isOpen is changed by other means. */ } closeTimeoutMS = { 0 /* Number indicating the milliseconds to wait before closing the modal. */ } style = { { overlay : {}, content : {} } /* Object indicating styles to be used for the modal. It has two keys, `overlay` and `content`. See the `Styles` section for more details. */ } contentLabel = { \"Example Modal\" /* String indicating how the content container should be announced to screenreaders */ } portalClassName = { \"ReactModalPortal\" /* String className to be applied to the portal. See the `Styles` section for more details. */ } overlayClassName = { \"ReactModal__Overlay\" /* String className to be applied to the overlay. See the `Styles` section for more details. */ } id = { \"some-id\" /* String id to be applied to the content div. */ } className = { \"ReactModal__Content\" /* String className to be applied to the modal content. See the `Styles` section for more details. */ } bodyOpenClassName = { \"ReactModal__Body--open\" /* String className to be applied to the document.body (must be a constant string). This attribute when set as `null` doesn't add any class to document.body. See the `Styles` section for more details. */ } htmlOpenClassName = { \"ReactModal__Html--open\" /* String className to be applied to the document.html (must be a constant string). This attribute is `null` by default. See the `Styles` section for more details. */ } ariaHideApp = { true /* Boolean indicating if the appElement should be hidden */ } shouldFocusAfterRender = { true /* Boolean indicating if the modal should be focused after render. */ } shouldCloseOnOverlayClick = { true /* Boolean indicating if the overlay should close the modal */ } shouldCloseOnEsc = { true /* Boolean indicating if pressing the esc key should close the modal Note: By disabling the esc key from closing the modal you may introduce an accessibility issue. */ } shouldReturnFocusAfterClose = { true /* Boolean indicating if the modal should restore focus to the element that had focus prior to its display. */ } role = { \"dialog\" /* String indicating the role of the modal, allowing the 'dialog' role to be applied if desired. This attribute is `dialog` by default. */ } preventScroll = { false /* Boolean indicating if the modal should use the preventScroll flag when restoring focus to the element that had focus prior to its display. */ } parentSelector = { () => document . body /* Function that will be called to get the parent element that the modal will be attached to. */ } aria = { { labelledby : \"heading\" , describedby : \"full_description\" } /* Additional aria attributes (optional). */ } data = { { background : \"green\" } /* Additional data attributes (optional). */ } testId = { \"\" /* String testId that renders a data-testid attribute in the DOM, useful for testing. */ } overlayRef = { setOverlayRef /* Overlay ref callback. */ } contentRef = { setContentRef /* Content ref callback. */ } overlayElement = { ( props , contentElement ) => < div { ...props }>{ contentElement }</ div > /* Custom Overlay element. */ } contentElement = { ( props , children ) => < div { ...props }>{ children }</ div > /* Custom Content element. */ } > < p > Modal Content </ p > </ ReactModal >","title":"General Usage"},{"location":"#using-a-custom-parent-node","text":"By default, the modal portal will be appended to the document's body. You can choose a different parent element by providing a function to the parentSelector prop that returns the element to be used: < Modal ... parentSelector = {() => document . querySelector ( '#root' )}> < p > Modal Content .</ p > </ Modal > If you do this, please ensure that your app element is set correctly. The app element should not be a parent of the modal, to prevent modal content from being hidden to screenreaders while it is open.","title":"Using a custom parent node"},{"location":"#refs","text":"You can use ref callbacks to get the overlay and content DOM nodes directly: < Modal ... overlayRef = { node => ( this . overlayRef = node )} contentRef = { node => ( this . contentRef = node )}> < p > Modal Content .</ p > </ Modal >","title":"Refs"},{"location":"#license","text":"MIT","title":"License"},{"location":"accessibility/","text":"react-modal aims to be fully accessible, using the WAI-ARIA guidelines to support users of assistive technologies. This page describes some of react-modal's accessibility-oriented features, along with their configuration options. The app element It is important for users of screenreaders that other page content be hidden (via the aria-hidden attribute) while the modal is open. To allow react-modal to do this, you should call Modal.setAppElement with a query selector identifying the root of your app. For example, if your app content is located inside an element with the ID root , you could place the following call somewhere in your code before any modals are opened: Modal . setAppElement ( '#root' ); You can also pass a DOM element directly, so that the above example could be rewritten: Modal . setAppElement ( document . getElementById ( 'root' )); If you are already applying the aria-hidden attribute to your app content through other means, you can pass the ariaHideApp={false} prop to your modal to avoid getting a warning that your app element is not specified. Using Modal.setAppElement will not embed react-modal into your react app as a descendent component. It will just help boost up the app accessiblity. Keyboard navigation When the modal is opened, it restricts keyboard navigation using the tab key to elements within the modal content. This ensures that elements outside the modal (which are not visible while the modal is open) do not receive focus unexpectedly. By default, when the modal is closed, focus will be restored to the element that was focused before the modal was opened. To disable this behavior, you can pass the shouldReturnFocusAfterClose={false} prop to your modal. The modal can be closed using the escape key, unless the shouldCloseOnEsc={false} prop is passed. Disabling this behavior may cause accessibility issues for keyboard users, however, so it is not recommended. ARIA attributes Besides the aria-hidden attribute which is applied to the app element when the modal is shown, there are many other ARIA attributes which you can use to make your app more accessible. A complete list of ARIA attributes can be found in the ARIA specification . One ARIA attribute is given a dedicated prop by react-modal: you should use the contentLabel prop to provide a label for the modal content (via aria-label ) if there is no visible label on the screen. If the modal is already labeled with visible text, you should specify the element including the label with the aria-labelledby attribute using the aria prop described below. To pass other ARIA attributes to your modal, you can use the aria prop, which accepts an object whose keys are the attributes you want to set (without the leading aria- prefix). For example, you could have an alert modal with a title as well as a longer description: < Modal isOpen = { modalIsOpen } aria = {{ labelledby : \"heading\" , describedby : \"full_description\" }}> < h1 id = \"heading\" > Alert </ h1 > < div id = \"full_description\" > < p > Description goes here .</ p > </ div > </ Modal >","title":"Accessibility"},{"location":"accessibility/#the-app-element","text":"It is important for users of screenreaders that other page content be hidden (via the aria-hidden attribute) while the modal is open. To allow react-modal to do this, you should call Modal.setAppElement with a query selector identifying the root of your app. For example, if your app content is located inside an element with the ID root , you could place the following call somewhere in your code before any modals are opened: Modal . setAppElement ( '#root' ); You can also pass a DOM element directly, so that the above example could be rewritten: Modal . setAppElement ( document . getElementById ( 'root' )); If you are already applying the aria-hidden attribute to your app content through other means, you can pass the ariaHideApp={false} prop to your modal to avoid getting a warning that your app element is not specified. Using Modal.setAppElement will not embed react-modal into your react app as a descendent component. It will just help boost up the app accessiblity.","title":"The app element"},{"location":"accessibility/#keyboard-navigation","text":"When the modal is opened, it restricts keyboard navigation using the tab key to elements within the modal content. This ensures that elements outside the modal (which are not visible while the modal is open) do not receive focus unexpectedly. By default, when the modal is closed, focus will be restored to the element that was focused before the modal was opened. To disable this behavior, you can pass the shouldReturnFocusAfterClose={false} prop to your modal. The modal can be closed using the escape key, unless the shouldCloseOnEsc={false} prop is passed. Disabling this behavior may cause accessibility issues for keyboard users, however, so it is not recommended.","title":"Keyboard navigation"},{"location":"accessibility/#aria-attributes","text":"Besides the aria-hidden attribute which is applied to the app element when the modal is shown, there are many other ARIA attributes which you can use to make your app more accessible. A complete list of ARIA attributes can be found in the ARIA specification . One ARIA attribute is given a dedicated prop by react-modal: you should use the contentLabel prop to provide a label for the modal content (via aria-label ) if there is no visible label on the screen. If the modal is already labeled with visible text, you should specify the element including the label with the aria-labelledby attribute using the aria prop described below. To pass other ARIA attributes to your modal, you can use the aria prop, which accepts an object whose keys are the attributes you want to set (without the leading aria- prefix). For example, you could have an alert modal with a title as well as a longer description: < Modal isOpen = { modalIsOpen } aria = {{ labelledby : \"heading\" , describedby : \"full_description\" }}> < h1 id = \"heading\" > Alert </ h1 > < div id = \"full_description\" > < p > Description goes here .</ p > </ div > </ Modal >","title":"ARIA attributes"},{"location":"contributing/","text":"Commit Subjects If your patch changes the API or fixes a bug please use one of the following prefixes in your commit subject: [fixed] ... [changed] ... [added] ... [removed] ... That ensures the subject line of your commit makes it into the auto-generated changelog. Do not use these tags if your change doesn't fix a bug and doesn't change the public API. Commits with changed, added, or removed, must be reviewed by another collaborator. When using [changed] or [removed] ... Please include an upgrade path with example code in the commit message. If it doesn't make sense to do this, then it doesn't make sense to use [changed] or [removed] :) Docs Please update the README with any API changes, the code and docs should always be in sync. Development npm start runs the dev server to run/develop examples npm test will run the tests. scripts/test same as npm test but keeps karma running and watches for changes Build Please do not include the output of scripts/build in your commits, we only do this when we release. (Also, you probably don't need to build anyway unless you are fixing something around our global build.)","title":"Overview"},{"location":"contributing/#commit-subjects","text":"If your patch changes the API or fixes a bug please use one of the following prefixes in your commit subject: [fixed] ... [changed] ... [added] ... [removed] ... That ensures the subject line of your commit makes it into the auto-generated changelog. Do not use these tags if your change doesn't fix a bug and doesn't change the public API. Commits with changed, added, or removed, must be reviewed by another collaborator.","title":"Commit Subjects"},{"location":"contributing/#when-using-changed-or-removed","text":"Please include an upgrade path with example code in the commit message. If it doesn't make sense to do this, then it doesn't make sense to use [changed] or [removed] :)","title":"When using [changed] or [removed]..."},{"location":"contributing/#docs","text":"Please update the README with any API changes, the code and docs should always be in sync.","title":"Docs"},{"location":"contributing/#development","text":"npm start runs the dev server to run/develop examples npm test will run the tests. scripts/test same as npm test but keeps karma running and watches for changes","title":"Development"},{"location":"contributing/#build","text":"Please do not include the output of scripts/build in your commits, we only do this when we release. (Also, you probably don't need to build anyway unless you are fixing something around our global build.)","title":"Build"},{"location":"contributing/development/","text":"react-modal uses make to build and publish new versions and documentation. It works as a checklist for the future releases to keep everything updated such as CHANGELOG.md , package.json and bower.json and so on. The minimun works as a normal npm scripts. Usage Once you clone react-modal , you can run sh bootstrap.sh to check and download dependencies not managed by react-modal such as gitbook-cli . It will also show information about the current versions of node , npm , yarn and jq available. List of npm or yarn commands $ npm start $ npm run tests $ npm run lint List of make commands $ make help # show all make commands available $ make deps # npm install $ make serve # start a examples' web server $ make tests # use when developing $ make tests-ci # single run $ make lint # execute lint $ make publish # execute the entire pipeline to publish $ make publish-docs # execute the pipeline for docs","title":"Development setup"},{"location":"contributing/development/#usage","text":"Once you clone react-modal , you can run sh bootstrap.sh to check and download dependencies not managed by react-modal such as gitbook-cli . It will also show information about the current versions of node , npm , yarn and jq available.","title":"Usage"},{"location":"contributing/development/#list-of-npm-or-yarn-commands","text":"$ npm start $ npm run tests $ npm run lint","title":"List of npm or yarn commands"},{"location":"contributing/development/#list-of-make-commands","text":"$ make help # show all make commands available $ make deps # npm install $ make serve # start a examples' web server $ make tests # use when developing $ make tests-ci # single run $ make lint # execute lint $ make publish # execute the entire pipeline to publish $ make publish-docs # execute the pipeline for docs","title":"List of make commands"},{"location":"examples/","text":"The following sub-sections contain several examples of basic usage, hosted on CodePen . The examples directory in the project root also contains some examples which you can run locally. To build and run those examples using a local development server, run either $ npm start or $ yarn start and then point your browser to localhost:8080 .","title":"Run local"},{"location":"examples/css_classes/","text":"Using CSS Classes for Styling If you prefer to use CSS to handle styling the modal you can. One thing to note is that by using the className property you will override all default styles. CSS classes example","title":"Css Classes"},{"location":"examples/css_classes/#using-css-classes-for-styling","text":"If you prefer to use CSS to handle styling the modal you can. One thing to note is that by using the className property you will override all default styles. CSS classes example","title":"Using CSS Classes for Styling"},{"location":"examples/global_overrides/","text":"Global Overrides If you'll be using several modals and want to adjust styling for all of them in one location you can by modifying Modal.defaultStyles . Global overrides example","title":"Global Overrides"},{"location":"examples/global_overrides/#global-overrides","text":"If you'll be using several modals and want to adjust styling for all of them in one location you can by modifying Modal.defaultStyles . Global overrides example","title":"Global Overrides"},{"location":"examples/inline_styles/","text":"Using Inline Styles This example shows how to use inline styles to adjust the modal. inline styles example","title":"Inline Styles"},{"location":"examples/inline_styles/#using-inline-styles","text":"This example shows how to use inline styles to adjust the modal. inline styles example","title":"Using Inline Styles"},{"location":"examples/minimal/","text":"Minimal This example shows the minimal needed to get React Modal to work. Minimal example","title":"Minimal"},{"location":"examples/minimal/#minimal","text":"This example shows the minimal needed to get React Modal to work. Minimal example","title":"Minimal"},{"location":"examples/on_request_close/","text":"onRequestClose Callback This example shows how you can use the onRequestClose prop with a function to perform actions when closing. This is especially important for handling closing the modal via the escape key. Also more important if shouldCloseOnOverlayClick is set to true , when clicked on overlay it calls onRequestClose . onRequestClose example","title":"onRequestClose"},{"location":"examples/on_request_close/#onrequestclose-callback","text":"This example shows how you can use the onRequestClose prop with a function to perform actions when closing. This is especially important for handling closing the modal via the escape key. Also more important if shouldCloseOnOverlayClick is set to true , when clicked on overlay it calls onRequestClose . onRequestClose example","title":"onRequestClose Callback"},{"location":"examples/set_app_element/","text":"Using setAppElement This example shows how to use setAppElement to properly hide your application from screenreaders and other assistive technologies while the modal is open. You'll notice in this example that the aria-hidden attribute is applied to the #main div rather than the document body. setAppElement example","title":"setAppElement"},{"location":"examples/set_app_element/#using-setappelement","text":"This example shows how to use setAppElement to properly hide your application from screenreaders and other assistive technologies while the modal is open. You'll notice in this example that the aria-hidden attribute is applied to the #main div rather than the document body. setAppElement example","title":"Using setAppElement"},{"location":"examples/should_close_on_overlay_click/","text":"Using shouldCloseOnOverlayClick When shouldCloseOnOverlayClick is true (default value for this property), it requires the onRequestClose to be defined in order to close the . This is due to the fact that the react-modal doesn't store the isOpen on its state (only for the internal portal (see ModalPortal.js ). disable 'close on overlay click', codepen by claydiffrient enable 'close on overlay click', codepen by sbgriffi","title":"shouldCloseOnOverlayClick"},{"location":"examples/should_close_on_overlay_click/#using-shouldcloseonoverlayclick","text":"When shouldCloseOnOverlayClick is true (default value for this property), it requires the onRequestClose to be defined in order to close the . This is due to the fact that the react-modal doesn't store the isOpen on its state (only for the internal portal (see ModalPortal.js ). disable 'close on overlay click', codepen by claydiffrient enable 'close on overlay click', codepen by sbgriffi","title":"Using shouldCloseOnOverlayClick"},{"location":"styles/","text":"Styles passed into the Modal via the style prop are merged with the defaults. The default styles are defined in the Modal.defaultStyles object and are shown below. < Modal ... style = {{ overlay : { position : 'fixed' , top : 0 , left : 0 , right : 0 , bottom : 0 , backgroundColor : 'rgba(255, 255, 255, 0.75)' }, content : { position : 'absolute' , top : '40px' , left : '40px' , right : '40px' , bottom : '40px' , border : '1px solid #ccc' , background : '#fff' , overflow : 'auto' , WebkitOverflowScrolling : 'touch' , borderRadius : '4px' , outline : 'none' , padding : '20px' } }} ... > You can change the default styles by modifying Modal.defaultStyles . Please note that specifying a CSS class for the overlay or the content will disable the default styles for that component.","title":"Inline Styles"},{"location":"styles/classes/","text":"Sometimes it may be preferable to use CSS classes rather than inline styles. react-modal can be configured to use CSS classes to style the modal content and overlay, as well as the document body and the portal within which the modal is mounted. For the content and overlay You can use the className and overlayClassName props to control the CSS classes that are applied to the modal content and the overlay, respectively. Each of these props may be a single string containing the class name to apply to the component. Alternatively, you may pass an object with the base , afterOpen and beforeClose keys, where the value corresponding to each key is a class name. The base class will always be applied to the component, the afterOpen class will be applied after the modal has been opened and the beforeClose class will be applied after the modal has requested to be closed (e.g. when the user presses the escape key or clicks on the overlay). Please note that the beforeClose class will have no effect unless the closeTimeoutMS prop is set to a non-zero value, since otherwise the modal will be closed immediately when requested. Thus, if you are using the afterOpen and beforeClose classes to provide transitions, you may want to set closeTimeoutMS to the length (in milliseconds) of your closing transition. If you specify className , the default content styles will not be applied. Likewise, if you specify overlayClassName , the default overlay styles will not be applied. If no class names are specified for the overlay, the default classes ReactModal__Overlay , ReactModal__Overlay--after-open and ReactModal__Overlay--before-close will be applied; the default classes for the content use the analogous prefix ReactModal__Content . Please note that any styles applied using these default classes will not override the default styles as they would if specified using the className or overlayClassName props. For the document.body and html tag You can override the default class that is added to document.body when the modal is open by defining a property bodyOpenClassName . The bodyOpenClassName prop must be a constant string ; otherwise, we would require a complex system to manage which class name should be added to or removed from document.body from which modal (if using multiple modals simultaneously). The default value is ReactModal__Body--open . bodyOpenClassName when set as null doesn't add any class to document.body . bodyOpenClassName can support adding multiple classes to document.body when the modal is open. Add as many class names as you desire, delineated by spaces. One potential application for the body class is to remove scrolling on the body when the modal is open. To do this for all modals (except those that specify a non-default bodyOpenClassName ), you could use the following CSS: . ReactModal__Body--open { overflow : hidden ; } You can define a class to be added to the html tag, using the htmlOpenClassName attribute, which can be helpeful to stop the page to scroll to the top when open a modal. The default value is null . This attribute follows the same rules as bodyOpenClassName , it must be a constant string ; Here is an example that can help preventing this behavior: . ReactModal__Body--open , . ReactModal__Html--open { overflow : hidden ; } For the entire portal To specify a class to be applied to the entire portal, you may use the portalClassName prop. By default, there are no styles applied to the portal itself.","title":"Classes"},{"location":"styles/classes/#for-the-content-and-overlay","text":"You can use the className and overlayClassName props to control the CSS classes that are applied to the modal content and the overlay, respectively. Each of these props may be a single string containing the class name to apply to the component. Alternatively, you may pass an object with the base , afterOpen and beforeClose keys, where the value corresponding to each key is a class name. The base class will always be applied to the component, the afterOpen class will be applied after the modal has been opened and the beforeClose class will be applied after the modal has requested to be closed (e.g. when the user presses the escape key or clicks on the overlay). Please note that the beforeClose class will have no effect unless the closeTimeoutMS prop is set to a non-zero value, since otherwise the modal will be closed immediately when requested. Thus, if you are using the afterOpen and beforeClose classes to provide transitions, you may want to set closeTimeoutMS to the length (in milliseconds) of your closing transition. If you specify className , the default content styles will not be applied. Likewise, if you specify overlayClassName , the default overlay styles will not be applied. If no class names are specified for the overlay, the default classes ReactModal__Overlay , ReactModal__Overlay--after-open and ReactModal__Overlay--before-close will be applied; the default classes for the content use the analogous prefix ReactModal__Content . Please note that any styles applied using these default classes will not override the default styles as they would if specified using the className or overlayClassName props.","title":"For the content and overlay"},{"location":"styles/classes/#for-the-documentbody-and-html-tag","text":"You can override the default class that is added to document.body when the modal is open by defining a property bodyOpenClassName . The bodyOpenClassName prop must be a constant string ; otherwise, we would require a complex system to manage which class name should be added to or removed from document.body from which modal (if using multiple modals simultaneously). The default value is ReactModal__Body--open . bodyOpenClassName when set as null doesn't add any class to document.body . bodyOpenClassName can support adding multiple classes to document.body when the modal is open. Add as many class names as you desire, delineated by spaces. One potential application for the body class is to remove scrolling on the body when the modal is open. To do this for all modals (except those that specify a non-default bodyOpenClassName ), you could use the following CSS: . ReactModal__Body--open { overflow : hidden ; } You can define a class to be added to the html tag, using the htmlOpenClassName attribute, which can be helpeful to stop the page to scroll to the top when open a modal. The default value is null . This attribute follows the same rules as bodyOpenClassName , it must be a constant string ; Here is an example that can help preventing this behavior: . ReactModal__Body--open , . ReactModal__Html--open { overflow : hidden ; }","title":"For the document.body and html tag"},{"location":"styles/classes/#for-the-entire-portal","text":"To specify a class to be applied to the entire portal, you may use the portalClassName prop. By default, there are no styles applied to the portal itself.","title":"For the entire portal"},{"location":"styles/transitions/","text":"Using CSS classes , it is possible to implement transitions for when the modal is opened or closed. By placing the following CSS somewhere in your project's styles, you can make the modal content fade in when it is opened and fade out when it is closed: . ReactModal__Overlay { opacity : 0 ; transition : opacity 2000 ms ease-in-out ; } . ReactModal__Overlay--after-open { opacity : 1 ; } . ReactModal__Overlay--before-close { opacity : 0 ; } The above example will apply the fade transition globally, affecting all modals whose afterOpen and beforeClose classes have not been set via the className prop. To apply the transition to one modal only, you can change the above class names and pass an object to your modal's className prop as described in the previous section . In order for the fade transition to work, you need to inform the <Modal /> about the transition time required for the animation. Like this < Modal closeTimeoutMS = { 2000 } /> closeTimeoutMS is expressed in milliseconds. The closeTimeoutMS value and the value used in CSS or style prop passed to <Modal /> needs to be the same. Warning: if you are using React 16 , the close transition works only if you use the isOpen prop to toggle the visibility of the modal. Do not conditionally render the <Modal /> . Instead of this { this . state . showModal && < Modal closeTimeoutMS = { 200 } isOpen contentLabel = \"modal\" onRequestClose = {() => this . toggleModal ()} > < h2 > Add modal content here </ h2 > </ Modal > } Do this { < Modal closeTimeoutMS = { 200 } isOpen = { this . state . showModal } contentLabel = \"modal\" onRequestClose = {() => this . toggleModal ()} > < h2 > Add modal content here </ h2 > </ Modal > } React Modal has adopted the stable Portal API API as exposed in React 16. And createProtal API from React 16 no longer allow developers to intervene the unmounting of the portal component.","title":"Transitions"},{"location":"testing/","text":"Testing When using React Test Utils with this library, here are some things to keep in mind: You need to set isOpen={true} on the modal component for it to render its children. You need to use the .portal property, as in ReactDOM.findDOMNode(renderedModal.portal) or TestUtils.scryRenderedDOMComponentsWithClass(Modal.portal, 'my-modal-class') to acquire a handle to the inner contents of your modal.","title":"Testing"},{"location":"testing/#testing","text":"When using React Test Utils with this library, here are some things to keep in mind: You need to set isOpen={true} on the modal component for it to render its children. You need to use the .portal property, as in ReactDOM.findDOMNode(renderedModal.portal) or TestUtils.scryRenderedDOMComponentsWithClass(Modal.portal, 'my-modal-class') to acquire a handle to the inner contents of your modal.","title":"Testing"}]}